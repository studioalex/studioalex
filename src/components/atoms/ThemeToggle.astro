<input type="checkbox" id="theme-switch" class="mode-switcher" />
<label for="theme-switch" class="mode-switcher">
  <div class="moon">
  </div>
  <div class="sun">
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
    <span></span>
  </div>
</label>
<script>
  // Get the theme toggle input
  const themeToggle = document.querySelector('input[type="checkbox"].mode-switcher')

  // Get the current theme from local storage
  const currentTheme = localStorage.getItem('theme')

  // If the current local storage item can be found
  if (currentTheme) {
    // Set the body data-theme attribute to match the local storage item
    document.documentElement.setAttribute('data-theme', currentTheme)

    // If the current theme is dark, check the theme toggle
    if (currentTheme === 'dark') {
      themeToggle.checked = true
    }
  }

  // Function that will switch the theme based on the if the theme toggle is checked or not
  function switchTheme(event) {
    if (event.target.checked) {
      document.documentElement.setAttribute('data-theme', 'dark')
      localStorage.setItem('theme', 'dark')
    } else {
      document.documentElement.setAttribute('data-theme', 'light')
      localStorage.setItem('theme', 'light')
    }
  }

  // Add an event listener to the theme toggle, which will switch the theme
  themeToggle.addEventListener('change', switchTheme, false)
</script>

<style>
input.mode-switcher {
  display: none;
  
  &:checked ~ label.mode-switcher {
    --translatex: 4.35em;
    .moon {
      left: 2em;
      top: 2em;
      height: 6em;
      width: 6em;
      mask-position: 20% 90%;
      mask-size: 200% 200%;
    }
  }
}

label.mode-switcher {
  --translatex: 0.35em;
  position: relative;
  display: inline-block;
  font-size: 3.05px;
  width: 10em;
  height: 10em;
  border-radius: 50%;
  margin-left: 2rem;
  vertical-align: bottom;
  cursor: pointer;
  
  &:checked {
    --translatex: 4.35em;
    .moon {
      left: 2em;
      top: 2em;
      height: 6em;
      width: 6em;
      mask-position: 20% 90%;
      mask-size: 200% 200%;
    }
  }
  
  .moon {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: var(--theme-color-text);
    border-radius: 50%;
    transition: mask-position .5s linear,
      mask-size .3s linear,
      height .4s ease-out,
      width .4s ease-out,
      left .4s ease-out,
      top .4s ease-out;
    mask-image: radial-gradient(circle at 105% 15%,
      rgb(255 255 255 / 0) 40%,
      rgb(0 0 0 / 1) 40%);
    mask-position: 0% 0%;
    mask-size: 100% 100%;
    mask-repeat: no-repeat;
  }
  
  .sun {
    span {
      position: absolute;
      display: block;
      width: 1.3em;
      height: .8em;
      background: var(--theme-color-text);
      border-radius: 999em;
      margin-left: -0.65em;
      margin-top: -.45em;
      left: 50%;
      top: 50%;
      transition: transform .3s ease-out;

      &:nth-child(1) {
        transform: rotate(36deg) translateX(var(--translatex));
      }
      &:nth-child(2){
        transform: rotate(72deg) translateX(var(--translatex));
      }
      &:nth-child(3){
        transform: rotate(108deg) translateX(var(--translatex));
      }
      &:nth-child(4){
        transform: rotate(144deg) translateX(var(--translatex));
      }
      &:nth-child(5){
        transform: rotate(180deg) translateX(var(--translatex));
      }
      &:nth-child(6){
        transform: rotate(216deg) translateX(var(--translatex));
      }
      &:nth-child(7){
        transform: rotate(252deg) translateX(var(--translatex));
      }
      &:nth-child(8){
        transform: rotate(288deg) translateX(var(--translatex));
      }
      &:nth-child(9){
        transform: rotate(324deg) translateX(var(--translatex));
      }
      &:nth-child(10){
        transform: rotate(360deg) translateX(var(--translatex));
      }
    }
  }
}
</style>
