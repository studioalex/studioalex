---
import { getCollection, CollectionEntry } from 'astro:content'

// component imports
import Layout from '../../layouts/Layout.astro'
import Headline from '../../components/atoms/Headline.astro'
import TipCard from '../../components/tips/TipCard.astro'
import CategoryList from '../../components/tips/CategoryList.astro'

// utils
import { slugify, formatTipPosts } from '../../lib/helper'

export async function getStaticPaths({ paginate }) {
  const allPosts = await getCollection('tips')
  const formattedPosts: CollectionEntry<'tips'>[] = formatTipPosts(allPosts)
  const allCategories = formattedPosts.map((category) => category.data.tags).flat()
  const processedCategories = allCategories.reduce((acc, category) => {
    // check if the category exists in the acc
    const value = acc[category] || 0
    return {
      ...acc,
      [category]: value + 1
    }
  }, {})

  return Object.keys(processedCategories).map(key => (
    {
      params: { category: slugify(key) },
      props: { name: key }
    }
  ))
}

const { category } = Astro.params
const { name } = Astro.props

const allPosts = await getCollection('tips')
const formattedPosts: CollectionEntry<'tips'>[] = formatTipPosts(allPosts, { categoryFilter: name })
---
<Layout title="Studio Alex - Tips by category" styles="size-wide">
  <div class="tip-wrap">
    <Headline>Tips by {name} category</Headline>
    <div>
      <CategoryList showCount={true} reduceBy={name}/>
    </div>
    <div class="tip-grid">
      {
        formattedPosts.map(tip => 
          <TipCard
            path={`/tips/${tip.slug}`}
            title={tip.data.title}
            description={tip.data.description}
            image={tip.data.image}
            tags={tip.data.tags}
            date={tip.data.date} />
        )
      }
    </div>
    <!-- div class="text-center m-8">
      <Pagination prevUrl={page.url.prev} nextUrl={page.url.next} />
    </div -->
  </div>
</Layout>

<style>
  .tip {
    &-wrap {
      max-width: var(--screen-size--base);
      margin: 0 auto;
      padding: 0 2rem;
    }
    &-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: var(--theme-grid-gap);
      margin: 0 0 var(--theme-grid-gap) 0;
    }
  }
</style>
